{"version":3,"sources":["../src/blog.js"],"names":[],"mappings":"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","file":"blog.js","sourcesContent":["import 'fs';\nimport 'path';\n\nimport debug from 'debug';\nimport fetch from 'node-fetch';\nimport sleep from 'es7-sleep';\nimport minimist from 'minimist';\nimport URL from 'normalize-url';\n\nconst HTTP = {\n  GET: 'GET',\n  POST: 'POST'\n};\n\nconst trace  = debug('blog');\nconst argv   = minimist(process.argv.slice(2));\n\n/* istanbul ignore next  */\nconst silent = __SILENT__? true : !!argv.silent;\n\n/**\n *\n * @param endpoint Resource endpoint. (required)\n * @param method   HTTP method.       (optional)\n * @param data     HTTP payload.      (optional)\n * @returns {*}\n */\nasync function api(endpoint, method, data) {\n  const server = 'https://jsonplaceholder.typicode.com/';\n  const url    = URL(`${server}${endpoint}`);\n  const opt    = { method: HTTP.GET };\n\n  if (typeof(method) === 'string')\n    opt.method = method;\n\n  if (typeof(data) === 'object') {\n    opt.body = JSON.stringify(data);\n    opt.headers = { 'content-type': 'application/json' }\n  }\n\n  trace(`${url} ${opt.method}`);\n\n  const res = await fetch(url, opt)\n    .catch( (err) => {\n      const msg = `Error fetching [${url}]: \\nReason: ${err.message}`;\n      /* istanbul ignore next  */\n      if (!silent) console.log(msg);\n\n      return { json: {}, error: msg }\n    });\n\n  const json   = typeof(res.json) === 'function' ? (await res.json()) : res.json;\n\n  return {\n    endpoint: endpoint,\n    method  : method,\n    option  : opt,\n    response: res,\n    json    : json,\n    error   : res.error\n  };\n}\n\n/**\n * Console log message\n *\n * @param msg The string to output.\n */\n/* istanbul ignore next  */\nfunction print(msg) {\n  if (!silent) console.log(msg);\n}\n\n\n/**\n * Get user by ID and print out name and email.\n *\n * @param userId The user ID.\n * @returns {user}\n */\nasync function getUser(userId) {\n  const user  = await api(`users/${userId}`);\n  const json  = user.json;\n\n  const msg = `\n${json.name} (${json.email})`;\n\n  print(msg);\n  return json;\n}\n\n\n/**\n * Show a summary of posts, albums, and todos.\n *\n * @param user The {user} object.\n * @returns {posts, albums, todos}\n */\nasync function showSummary(user) {\n  const posts  = await api(`posts?userId=${user.id}`);\n  const albums = await api(`albums?userId=${user.id}`);\n  const todos  = await api(`todos?userId=${user.id}`);\n\n  const msg = [`\n@${user.username} has ${posts.json.length} posts, ${albums.json.length} albums, and ${todos.json.length} todos\n\nPosts:`];\n\n  // posts.json.forEach( (item) => msg.push(`Post ${item.id}: ${item.title}`) );\n\n  print(msg.join('\\n'));\n\n  return { posts: posts.json, albums: albums.json, todos: todos.json };\n}\n\n\n/**\n * Show a post.\n *\n * @param user The {user} object.\n * @param post The {post} object.\n * @returns {comment}\n */\nasync function showPost(user, post) {\n  const comment = await api(`comments?userId=${user.id}&postId=${post.id}`);\n  const json    = comment.json;\n\n  const msg = [`\nViewing post \"${post.title}\" which has ${json.length} comments.\n\nComments:`];\n\n  json.forEach( (item) => {\n    msg.push(`${item.id} [${item.email}]: ${item.name} `);\n    msg.push(`${item.body.replace(/\\n/g, '')}`);\n    msg.push('');\n  });\n\n  print(msg.join('\\n'));\n\n  return json;\n}\n\n\n/**\n * Add a comment to a post.\n *\n * @param user    The {user} object.\n * @param post    The {post} object.\n * @param comment The comment to post.\n * @returns {comment}\n */\nasync function addComment(user, post, comment) {\n  const data = {\n    name : post.title,\n    email: user.email,\n    body : comment\n  };\n  const result = await api(`posts/${post.id}/comments?userId=${user.id}`, HTTP.POST, data);\n  const json = result.json;\n\n  const msg = `\nYou commented:\n${json.body}\n`;\n\n  print(msg);\n\n  return json;\n}\n\n/* istanbul ignore next  */\nexport {\n  api,\n  print,\n  getUser,\n  showSummary,\n  showPost,\n  addComment\n}\n\n\n/**\n * Start simulation\n */\n/* istanbul ignore next  */\nif (require.main === module) {\n  (async function () {\n    // Get user by ID\n    const user = await getUser(argv.user ? argv.user : 1);\n\n    // Show user summary and posts\n    const data = await showSummary(user);\n\n    // Wait 5 secs\n    await sleep(5000);\n\n    // Show comment\n    const post = data.posts[4];\n    await showPost(user, post);\n\n    await sleep(1000);\n    await addComment(user, post, 'Great post!');\n  })();\n}\n"]}